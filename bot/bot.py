# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è Telegram –±–æ—Ç–∞ –∏ HTTP –∫–ª–∏–µ–Ω—Ç–∞
import asyncio
import logging
import aiohttp
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.exceptions import TelegramBadRequest, TelegramNetworkError
from config import config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=getattr(logging, config.log_level.upper()),
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å Telegram –±–æ—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–æ–≤
class P2PCallBot:
    def __init__(self):
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞
        if not config.validate():
            raise ValueError("Invalid bot configuration")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
        self.bot = Bot(token=config.bot_token)
        self.dp = Dispatcher()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ callback'–æ–≤
        self._register_handlers()
        
        logger.info("P2P Call Bot initialized")
    
    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ callback'–æ–≤ –¥–ª—è –±–æ—Ç–∞"""
        
        # –ö–æ–º–∞–Ω–¥–∞ /start
        self.dp.message.register(self.start_command, Command("start"))
        
        # –ö–æ–º–∞–Ω–¥–∞ /help
        self.dp.message.register(self.help_command, Command("help"))
        
        # –ö–æ–º–∞–Ω–¥–∞ /create
        self.dp.message.register(self.create_command, Command("create"))
        
        # –ö–æ–º–∞–Ω–¥–∞ /call
        self.dp.message.register(self.call_command, Command("call"))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ callback'–æ–≤
        self.dp.callback_query.register(self.handle_create_call, F.data == "create_call")
        self.dp.callback_query.register(self.handle_copy_link, F.data.startswith("copy_link:"))
        self.dp.callback_query.register(self.handle_new_call, F.data == "new_call")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        self.dp.errors.register(self.error_handler)
    
    async def start_command(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –∑–≤–æ–Ω–∫–∞"""
        try:
            welcome_text = """
–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ P2P Call Bot!

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∏ —á–µ—Ä–µ–∑ WebRTC.

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–≤–æ–Ω–æ–∫:
            """
            
            keyboard = InlineKeyboardBuilder()
            keyboard.add(
                InlineKeyboardButton(
                    text="–°–æ–∑–¥–∞—Ç—å –∑–≤–æ–Ω–æ–∫",
                    callback_data="create_call"
                )
            )
            
            await message.answer(
                welcome_text,
                reply_markup=keyboard.as_markup()
            )
            
            logger.info(f"Start command from user {message.from_user.id}")
            
        except Exception as e:
            logger.error(f"Error in start_command: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    async def help_command(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help - –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∫–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"""
        try:
            help_text = """
üìû **–°–ø—Ä–∞–≤–∫–∞ –ø–æ P2P Call Bot**

**–ö–æ–º–∞–Ω–¥—ã:**
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/call - –ë—ã—Å—Ç—Ä–æ —Å–æ–∑–¥–∞—Ç—å –∑–≤–æ–Ω–æ–∫ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
/create - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–≤–æ–Ω–æ–∫

**–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:**
1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É `/call`
2. –ü–æ–ª—É—á–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∑–≤–æ–Ω–æ–∫
3. –°—Å—ã–ª–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–æ–ø–∏—Ä—É–µ—Ç—Å—è –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
4. –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
5. –í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —Ä–∞–≤–Ω–æ–ø—Ä–∞–≤–Ω—ã
6. –ó–≤–æ–Ω–æ–∫ –∞–∫—Ç–∏–≤–µ–Ω 60 –º–∏–Ω—É—Ç (–æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏)

**–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:**
‚Ä¢ üîí End-to-end —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ
‚Ä¢ üîó –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –Ω–µ–ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã–µ —Å—Å—ã–ª–∫–∏
‚Ä¢ ‚è∞ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
‚Ä¢ üë• –î–æ 2 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –æ–¥–Ω–æ–º –∑–≤–æ–Ω–∫–µ
‚Ä¢ üöÄ –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–≤–æ–Ω–∫–∏
‚Ä¢ ‚ö° –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —á–µ—Ä–µ–∑ `/call`

**–ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏ –≤ –∑–≤–æ–Ω–∫–µ:**
‚Ä¢ –ü—Ä–æ–±–µ–ª - –º–∏–∫—Ä–æ—Ñ–æ–Ω –≤–∫–ª/–≤—ã–∫–ª
‚Ä¢ V - –≤–∏–¥–µ–æ –≤–∫–ª/–≤—ã–∫–ª
‚Ä¢ S - –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —ç–∫—Ä–∞–Ω–æ–º
‚Ä¢ Esc - –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–≤–æ–Ω–æ–∫
            """
            
            await message.answer(help_text)
            logger.info(f"Help command from user {message.from_user.id}")
            
        except Exception as e:
            logger.error(f"Error in help_command: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    async def create_command(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /create - —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–≤–æ–Ω–∫–∞"""
        try:
            keyboard = InlineKeyboardBuilder()
            keyboard.add(
                InlineKeyboardButton(
                    text="–°–æ–∑–¥–∞—Ç—å –∑–≤–æ–Ω–æ–∫",
                    callback_data="create_call"
                )
            )
            
            await message.answer(
                "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–≤–æ–Ω–∫–∞:",
                reply_markup=keyboard.as_markup()
            )
            
            logger.info(f"Create command from user {message.from_user.id}")
            
        except Exception as e:
            logger.error(f"Error in create_command: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    async def call_command(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /call - –±—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–∞"""
        try:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            await message.answer("üîÑ –°–æ–∑–¥–∞—é —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –∑–≤–æ–Ω–∫–∞...")
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–º–Ω–∞—Ç—É —á–µ—Ä–µ–∑ API
            room_data = await self._create_room()
            
            if not room_data:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–≤–æ–Ω–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return
            
            room_id = room_data.get('roomId')
            room_url = room_data.get('url')
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            call_text = f"""
üé• **–ó–≤–æ–Ω–æ–∫ —Å–æ–∑–¥–∞–Ω!**

üîó **–°—Å—ã–ª–∫–∞ –Ω–∞ –∑–≤–æ–Ω–æ–∫:**
`{room_url}`

‚è∞ **–í—Ä–µ–º—è –∂–∏–∑–Ω–∏:** 60 –º–∏–Ω—É—Ç (–æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏)
üë• **–£—á–∞—Å—Ç–Ω–∏–∫–∏:** –î–æ 2 —á–µ–ª–æ–≤–µ–∫ –≤ –æ–¥–Ω–æ–º –∑–≤–æ–Ω–∫–µ
üîí **–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:** End-to-end —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ

üìã **–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!**
–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –µ—é —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –∑–≤–æ–Ω–∫–∞.

üí° **–°–æ–≤–µ—Ç:** –í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —Ä–∞–≤–Ω–æ–ø—Ä–∞–≤–Ω—ã - –Ω–µ—Ç "–∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞" –∏–ª–∏ "–ø—Ä–∏–Ω–∏–º–∞—é—â–µ–≥–æ".
            """
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
            auto_copy_url = f"{room_url}?auto_copy=true"
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = InlineKeyboardBuilder()
            keyboard.add(
                InlineKeyboardButton(
                    text="üé• –û—Ç–∫—Ä—ã—Ç—å –∑–≤–æ–Ω–æ–∫",
                    url=auto_copy_url
                )
            )
            keyboard.add(
                InlineKeyboardButton(
                    text="üîÑ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–≤–æ–Ω–æ–∫",
                    callback_data="new_call"
                )
            )
            
            await message.answer(
                call_text,
                reply_markup=keyboard.as_markup(),
                parse_mode="Markdown"
            )
            
            logger.info(f"Call command from user {message.from_user.id}, room: {room_id}")
            
        except Exception as e:
            logger.error(f"Error in call_command: {e}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    async def handle_create_call(self, callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –∑–≤–æ–Ω–∫–∞ —á–µ—Ä–µ–∑ API —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            await callback.answer("–°–æ–∑–¥–∞—é –∑–≤–æ–Ω–æ–∫...", show_alert=False)
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–º–Ω–∞—Ç—É —á–µ—Ä–µ–∑ API
            room_data = await self._create_room()
            
            if not room_data:
                await callback.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–≤–æ–Ω–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return
            
            room_id = room_data.get('roomId')
            room_url = room_data.get('url')
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            call_text = f"""
–ó–≤–æ–Ω–æ–∫ —Å–æ–∑–¥–∞–Ω!

–°—Å—ã–ª–∫–∞ –Ω–∞ –∑–≤–æ–Ω–æ–∫: {room_url}

ID –∫–æ–º–Ω–∞—Ç—ã: `{room_id}`

–ó–≤–æ–Ω–æ–∫ –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–µ–Ω 60 –º–∏–Ω—É—Ç —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.

–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —ç—Ç–æ–π —Å—Å—ã–ª–∫–æ–π —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –∑–≤–æ–Ω–∫–∞.

–í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —Ä–∞–≤–Ω–æ–ø—Ä–∞–≤–Ω—ã - –Ω–µ—Ç "–∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞" –∏–ª–∏ "–ø—Ä–∏–Ω–∏–º–∞—é—â–µ–≥–æ".
            """
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = InlineKeyboardBuilder()
            keyboard.add(
                InlineKeyboardButton(
                    text="–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–≤–æ–Ω–æ–∫",
                    callback_data="new_call"
                )
            )
            keyboard.add(
                InlineKeyboardButton(
                    text="–û—Ç–∫—Ä—ã—Ç—å –∑–≤–æ–Ω–æ–∫",
                    url=f"{room_url}?auto_copy=true"
                )
            )
            keyboard.add(
                InlineKeyboardButton(
                    text="–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É",
                    callback_data=f"copy_link:{room_url}"
                )
            )
            
            await callback.message.answer(
                call_text,
                reply_markup=keyboard.as_markup(),
                parse_mode="Markdown"
            )
            
            logger.info(f"Call created for user {callback.from_user.id}, room: {room_id}")
            
        except Exception as e:
            logger.error(f"Error in handle_create_call: {e}")
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–≤–æ–Ω–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
    
    async def handle_copy_link(self, callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏"""
        try:
            url = callback.data.split(":", 1)[1]
            
            # –í Telegram –Ω–µ—Ç –ø—Ä—è–º–æ–≥–æ —Å–ø–æ—Å–æ–±–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
            # –ü–æ—ç—Ç–æ–º—É –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É
            await callback.answer(
                f"–°—Å—ã–ª–∫–∞: {url}\n\n–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –µ—ë –≤—Ä—É—á–Ω—É—é",
                show_alert=True
            )
            
            logger.info(f"Copy link requested by user {callback.from_user.id}")
            
        except Exception as e:
            logger.error(f"Error in handle_copy_link: {e}")
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∏", show_alert=True)
    
    async def handle_new_call(self, callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∑–≤–æ–Ω–∫–∞"""
        try:
            await callback.answer("–°–æ–∑–¥–∞—é –Ω–æ–≤—ã–π –∑–≤–æ–Ω–æ–∫...", show_alert=False)
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É
            room_data = await self._create_room()
            
            if not room_data:
                await callback.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–≤–æ–Ω–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return
            
            room_id = room_data.get('roomId')
            room_url = room_data.get('url')
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            call_text = f"""
–ù–æ–≤—ã–π –∑–≤–æ–Ω–æ–∫ —Å–æ–∑–¥–∞–Ω!

–°—Å—ã–ª–∫–∞ –Ω–∞ –∑–≤–æ–Ω–æ–∫: {room_url}

ID –∫–æ–º–Ω–∞—Ç—ã: `{room_id}`

–ó–≤–æ–Ω–æ–∫ –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–µ–Ω 60 –º–∏–Ω—É—Ç —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.
            """
            
            keyboard = InlineKeyboardBuilder()
            keyboard.add(
                InlineKeyboardButton(
                    text="–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–≤–æ–Ω–æ–∫",
                    callback_data="new_call"
                )
            )
            keyboard.add(
                InlineKeyboardButton(
                    text="–û—Ç–∫—Ä—ã—Ç—å –∑–≤–æ–Ω–æ–∫",
                    url=f"{room_url}?auto_copy=true"
                )
            )
            
            await callback.message.edit_text(
                call_text,
                reply_markup=keyboard.as_markup(),
                parse_mode="Markdown"
            )
            
            logger.info(f"New call created for user {callback.from_user.id}, room: {room_id}")
            
        except Exception as e:
            logger.error(f"Error in handle_new_call: {e}")
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–≤–æ–Ω–∫–∞", show_alert=True)
    
    async def _create_room(self) -> dict:
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç—ã –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∞ —á–µ—Ä–µ–∑ API —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(f"{config.server_url}/api/rooms") as response:
                    if response.status == 200:
                        data = await response.json()
                        logger.info(f"Room created successfully: {data.get('roomId')}")
                        return data
                    else:
                        logger.error(f"API error: {response.status}")
                        return None
                        
        except aiohttp.ClientError as e:
            logger.error(f"Network error creating room: {e}")
            return None
        except Exception as e:
            logger.error(f"Unexpected error creating room: {e}")
            return None
    
    async def error_handler(self, event, exception):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        logger.error(f"Error occurred: {exception}")
        
        # –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ Telegram API, –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        if isinstance(exception, (TelegramBadRequest, TelegramNetworkError)):
            try:
                # –ü–æ–ª—É—á–∞–µ–º chat_id –∏–∑ —Å–æ–±—ã—Ç–∏—è, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
                if hasattr(event, 'message') and event.message:
                    await event.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            except:
                pass
    
    async def start_polling(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling"""
        try:
            logger.info("Starting bot polling...")
            await self.dp.start_polling(self.bot)
        except Exception as e:
            logger.error(f"Error starting bot: {e}")
            raise
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        try:
            await self.bot.session.close()
            logger.info("Bot stopped")
        except Exception as e:
            logger.error(f"Error stopping bot: {e}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        bot = P2PCallBot()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        await bot.start_polling()
        
    except KeyboardInterrupt:
        logger.info("Bot stopped by user")
    except Exception as e:
        logger.error(f"Fatal error: {e}")
    finally:
        if 'bot' in locals():
            await bot.stop()

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    asyncio.run(main())
