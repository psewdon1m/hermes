import logging
from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from call_api import create_call

logger = logging.getLogger(__name__)
router = Router()

@router.message(Command("start"))
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    welcome_text = (
        "üé• –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–æ–≤!\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /createCall –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∑–≤–æ–Ω–∫–∞.\n"
        "–ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∑–≤–æ–Ω–∫—É."
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π —Å–æ–∑–¥–∞–Ω–∏—è –∑–≤–æ–Ω–∫–∞
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìû –°–æ–∑–¥–∞—Ç—å –∑–≤–æ–Ω–æ–∫", callback_data="create_call")]
        ]
    )
    
    await message.answer(welcome_text, reply_markup=keyboard)
    logger.info(f"User {message.from_user.id} started the bot")

@router.message(Command("createCall"))
async def cmd_create_call(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /createCall"""
    await create_call_handler(message)

@router.callback_query(F.data == "create_call")
async def callback_create_call(callback_query):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∑–≤–æ–Ω–∫–∞"""
    await callback_query.answer()
    await create_call_handler(callback_query.message, callback_query.from_user.id)

async def create_call_handler(message: Message, user_id: int = None):
    """–û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –∑–≤–æ–Ω–∫–∞"""
    if user_id is None:
        user_id = message.from_user.id
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–≤–æ–Ω–∫–∞
    status_message = await message.answer("üîÑ –°–æ–∑–¥–∞—é –∑–≤–æ–Ω–æ–∫...")
    
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º initiator ID
        initiator = str(user_id)
        
        # –í—ã–∑—ã–≤–∞–µ–º API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–≤–æ–Ω–∫–∞
        data = await create_call(initiator)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        success_text = (
            f"‚úÖ –ó–≤–æ–Ω–æ–∫ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!\n\n"
            f"üîó –°—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:\n"
            f"{data['joinUrl']}\n\n"
            f"–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —ç—Ç–æ–π —Å—Å—ã–ª–∫–æ–π —Å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –∑–≤–æ–Ω–∫–∞."
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–∫—Ä—ã—Ç–∏—è —Å—Å—ã–ª–∫–∏
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üîó –û—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É", url=data["joinUrl"])],
                [InlineKeyboardButton(text="üîÑ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–≤–æ–Ω–æ–∫", callback_data="create_call")]
            ]
        )
        
        await status_message.edit_text(success_text, reply_markup=keyboard)
        logger.info(f"Call created successfully for user {user_id}: {data.get('callId')}")
        
    except Exception as e:
        logger.error(f"Error creating call for user {user_id}: {e}")
        
        # –î—Ä—É–∂–µ–ª—é–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        error_text = (
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–≤–æ–Ω–∫–∞.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥."
        )
        
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="create_call")]
            ]
        )
        
        await status_message.edit_text(error_text, reply_markup=keyboard)

@router.message()
async def handle_other_messages(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    help_text = (
        "ü§ñ –Ø –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–æ–≤!\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "‚Ä¢ /createCall - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–≤–æ–Ω–æ–∫\n\n"
        "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤ –º–µ–Ω—é."
    )
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìû –°–æ–∑–¥–∞—Ç—å –∑–≤–æ–Ω–æ–∫", callback_data="create_call")]
        ]
    )
    
    await message.answer(help_text, reply_markup=keyboard)
